#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#

;cmucl crashes with silent on
(ql:quickload '(:ci-utils/utils) :silent (not (member :cmu *features*)))
(ci-utils/utils:quickload '(:ci-utils/coveralls :iterate :parachute)
           :silent (not (member :cmu *features*)))

(defpackage :ros.script.run-parachute
  (:use :cl :iterate :ci-utils/utils))
(in-package :ros.script.run-parachute)


(defun show-help ()
  (format t "~
Usage: run-parachute [options] <test names>...

Loads the system with quicklisp then calls parachute:test on each of
test names.  Each test name is parsed with read-from-string after
systems are loaded, allowing package qualified test names to be used.

Exits with code 0 if all tests passed, 1 if any failed, or 2 when one ERRORs.
Any required systems should be explicitly loaded with -l or --quickload option. If loading dependencies ERRORs, exit with code 3.

If the COVERALLS environemenal variable is present and non-empty, coverage will
be measured and reported to COVERALLS on platforms supported by CI-Utils.
Additionally, the environmental variable COVERAGE_EXCLUDED is read as a colon
seperated list of paths to exclude from measuring coverage, in addition to those
specified as arguments.

Note that currently the systems in the project root are loaded with
COVERALLS is enable.  This behavior is not to be relied on and may change in
the future, so instead use the `--quicklisp`/`-l` flag.
Options
--help|-h                     - prints this help message
--quickload|-l <sytem>        - lists an additional system to load
--coverage-exclude|-e <file>  - lists a path to excluded from the coverage
                                measurement
~%")
  (uiop:quit 4))


(defun main (&rest argv)
  (when (> 1 (length argv))
    (show-help))
  (with-fail-on-errors (:code 5)
    (iter (generate arg-list in argv)
      (for arg = (next arg-list))
      (cond
        ((or (string= "--help" arg) (string= "-h" arg))
         (show-help))
        ((or (string= "--quickload" arg) (string= "-l" arg))
         (collect (next arg-list) into loaded-systems))
        ((or (string= "--coverage-exclude" arg) (string= "-e" arg))
         (collect (next arg-list) into excluded))
        (t
         (collect arg into tests)))
      ;;evaluate tests here with `loaded-systems`, `excluded`, and `tests` in scope
      (finally
       (when loaded-systems
         (quickload loaded-systems :fail-on-error 3))
       (setf excluded (nconc excluded (ci-utils/coveralls:coverage-excluded)))
       (ci-utils/coveralls:with-coveralls excluded
         (unless
          (loop for test in tests
                do (format t "running parachute tests: ~s~%" test)
                always (let ((r (with-fail-on-errors (:code 9)
                                  (parachute:test (read-from-string test)))))
                         (not (eql :failed (parachute:status r)))))
           (uiop:quit 1)))))))
